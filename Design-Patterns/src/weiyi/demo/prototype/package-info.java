/**
 * @author weiyi
 *客户(Client)角色：客户类提出创建对象的请求。
 *抽象原型(Prototype)角色：这是一个抽象角色，通常由一个Java接口或Java抽象类实现。此角色给出所有的具体原型类所需的接口
 *具体原型（Concrete Prototype）角色：被复制的对象。此角色需要实现抽象的原型角色所要求的接口。
 *简单原型 和 复杂原型比较
 *如果需要创建的原型对象数目较少且比较固定 用简单原型，原型对象的引用可以由客户端自己保存。
 *需要创建的原型对象数目不固定，用第二种。这是原型对象引用的任务交给管理员对象，客户端进行复制拷贝。
 *原型模式 优点  允许在运行时动态改变具体的实现类型
 *缺点 每一个类都必须配备一个克隆方法
 */
package weiyi.demo.prototype;
